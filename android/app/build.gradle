def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

task copyDevGoogleServicesJson(type: Copy) {
    from "./google-service-infos/dev/google-services.json"
    into './'
}

task copyPrdGoogleServicesJson(type: Copy) {
    from "./google-service-infos/prd/google-services.json"
    into './'
}

tasks.whenTaskAdded { task ->
    if (task.name == 'processDevelopProductGoogleServices') {
        task.dependsOn copyPrdGoogleServicesJson
    } else {
        task.dependsOn copyDevGoogleServicesJson
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "dev.eita.android.pokemon_flutter_demo"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    def keystoreProperties = new Properties()
    def keystorePropertiesFile = file('../../.secrets/android/key.properties')
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file('../../.secrets/android/' + keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "default"

    productFlavors {
        develop {
            resValue "string", "app_name", "PokemonFlutter:Develop"
            versionNameSuffix ":Develop"
            applicationIdSuffix ".dev"
            buildConfigField "boolean", "DEBUG", "true"
        }
        staging {
            resValue "string", "app_name", "PokemonFlutter:Staging"
            versionNameSuffix ":Staging"
            applicationIdSuffix ".dev"
            buildConfigField "boolean", "DEBUG", "true"
        }
        product {
            resValue "string", "app_name", "PokemonFlutter"
            versionNameSuffix ""
            buildConfigField "boolean", "DEBUG", "false"
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:29.0.4')
}
